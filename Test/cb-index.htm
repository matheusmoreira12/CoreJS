<html xmlns:core="http://www.corejs.net/2016/core">
<head>
    <script type="text/javascript" src="../ModuleSystem/Built/index.js"></script>

    <script defer="defer">
        Core.ModuleSystem.declareModule("Core", ["Hello"], async function () {
            this.HelloWorld = class extends (await Core.ModuleSystem.resolveMemberValue("Hello.World")) {

            }
        });

        Core.ModuleSystem.declareModule("Hello", ["Core"], async function () {
            this.World = class extends String {
                constructor() {
                    super("Hello, world!");
                }
            }
        });
    </script>
</head>
<body>
    <core:preloadProgressDialog>
        <style scoped>
            core\:preloadProgressDialog {
                display: flex;
                justify-content: center;
                position: absolute;
                top: 0;
                right: 0;
                bottom: 0;
                left: 0;
                cursor: url("../Themes/Images/ui-wait-cursor-48x48.svg"), auto;
                background: transparent;
            }

            core\:preloadProgress {
                align-self: center;
                display: inline-block;
                padding: 5px;
                background-color: #e8e8e8;
                background-image: linear-gradient(to bottom, transparent, rgba(0, 0, 0, .1));
                border: 1px solid #636363;
                box-shadow: 0 2px 4px rgba(0, 0, 0, .4);
            }

            core\:preloadProgressBar {
                position: relative;
                display: inline-block;
                width: 194px;
                height: 6px;
                background-color: #b9b9b9;
                background-image: linear-gradient(to bottom, rgba(0, 0, 0, .1), transparent);
                border: 1px solid #636363;
                overflow: hidden;
                box-shadow: inset 0 1px 2px rgba(0, 0, 0, .2);
            }

            core\:preloadProgressBarFill {
                display: inline-block;
                position: absolute;
                top: 0;
                left: 0;
                width: 0;
                height: 100%;
                background-color: #ffffff;
                background-image: linear-gradient(to bottom, transparent, rgba(0, 0, 0, .1));
                border: 0;
                border-right: 1px solid #525252;
                transition: width ease-out .218s;
                box-shadow: 1px 0 2px rgba(0, 0, 0, .2);
            }
        </style>

        <core:preloadProgress class="preload-progress">
            <core:preloadProgressBar>
                <core:preloadProgressBarFill id="preloadProgressBarFill"></core:preloadProgressBarFill>
            </core:preloadProgressBar>
            <!--
                <script defer>
                    function updateProgress(loaded, total) {
                        let percent = loaded / total * 100;
                        preloadProgressBarFill.style.width = percent + "%";
                    }

                    let resourceQueue = new Core.ResourceLoader.ResourceQueue();

                    function requestInfoFile() {
                        let xhr = new XMLHttpRequest();
                        xhr.open("get", INFO_FILE_SRC);
                        xhr.overrideMimeType("application/xml");
                        xhr.send();

                        function infoFileLoaded() {
                            let doc = xhr.responseXML;

                            let infoTag = doc.children[0];
                            if (infoTag.tagName != "info")
                                throw new Error("Could not load Core.js. Invalid Loader Info file.");

                            for (let resourceTag of infoTag.children) {
                                let sourceURL = resourceTag.getAttribute("sourceURL");

                                switch (resourceTag.tagName) {
                                    case "resource":
                                        resourceQueue.enqueue(new ResourceLoader(sourceURL));
                                        break;
                                    default:
                                        throw new SyntaxError(`Unexpected tag ${resourceTag.tagName} in info file.`);
                                }
                            }

                            resourceQueue.loadAll();
                        }
                        xhr.onload = infoFileLoaded;
                    }

                    requestInfoFile();

                    resourceQueue.onprogresschanged = function (queue, newProgress) {
                        updateProgress(newProgress.loaded, newProgress.total);
                    }
                </script>
        -->
        </core:preloadProgress>
    </core:preloadProgressDialog>
</body>
</html>